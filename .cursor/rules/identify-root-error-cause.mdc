---
alwaysApply: false
---

# Error Root Cause Analysis Rule

## Objective
When analyzing errors, conduct a comprehensive, in-depth analysis of the codebase to identify the root cause of reported issues. This rule applies to any error analysis request, whether it's runtime errors, build failures, configuration issues, or unexpected behavior.

## Analysis Scope & Requirements

### 1. Root Cause Identification
- Pinpoint the exact reason the error is occurring
- Identify which specific part of the codebase, configuration, or environment is responsible
- Trace the error back to its source, not just the symptom
- Examine the call stack and execution flow leading to the error

### 2. Dependency & Environment Analysis
- Check for version conflicts or compatibility issues
- Verify environment variables and configuration settings
- Analyze dependency installations and imports
- Review system requirements and compatibility matrices
- Check for missing files, permissions, or network accessibility

### 3. Code & Behavior Analysis
- Inspect the specific code paths that lead to the error
- Analyze data flow and state changes before the error occurs
- Check for race conditions, timing issues, or async problems
- Review error handling and fallback mechanisms
- Examine input validation and boundary conditions

### 4. Logs & Diagnostics Review
- Analyze console logs, error messages, and stack traces
- Review network requests and responses if applicable
- Check for silent failures or warnings that precede the main error
- Correlate timestamps and events across different log sources
- Look for patterns in error frequency and conditions

### 5. Contextual Investigation
- Review recent changes that might have introduced the issue
- Check related configuration files and settings
- Analyze similar patterns elsewhere in the codebase
- Consider external factors (network, database, APIs)

## Required Deliverables

When completing error root cause analysis, always provide:

1. **Detailed Summary**: A clear explanation of your findings and the investigation process
2. **Exact Location**: The specific line(s), file(s), or configuration(s) responsible for the error
3. **Root Cause**: The fundamental reason why the error is occurring (not just what's failing)
4. **Suggested Fix**: Concrete, actionable steps to resolve the issue
5. **Prevention Recommendations**: Optional but valuable suggestions for:
   - Improving error handling
   - Adding better logging or monitoring
   - Preventing similar issues in the future
   - Code quality improvements

## Investigation Process

1. **Start Broad**: Use codebase search to understand the overall context and find related code
2. **Narrow Down**: Focus on specific files and functions mentioned in error messages
3. **Trace Backwards**: Follow the execution path that leads to the error
4. **Check Dependencies**: Verify all required components are properly configured
5. **Test Hypotheses**: Validate your findings by examining the code logic
6. **Document Thoroughly**: Explain your reasoning and evidence for the root cause

## Communication Guidelines

- Be specific about what you found and where
- Explain technical concepts clearly
- Provide code references with line numbers when relevant
- If information is missing or unclear, explicitly request clarification
- Prioritize actionable solutions over theoretical explanations

## Error Categories to Consider

- **Runtime Errors**: Exceptions, crashes, unexpected behavior
- **Build/Compilation Errors**: Syntax, import, or dependency issues
- **Configuration Errors**: Environment, settings, or deployment problems
- **Network/API Errors**: Connectivity, authentication, or response issues
- **Database/Storage Errors**: Query, connection, or data integrity problems
- **Performance Issues**: Memory leaks, slow responses, or resource exhaustion

Remember: The goal is not just to identify what's broken, but to understand why it's broken and how to fix it permanently.# Error Root Cause Analysis Rule

## Objective
When analyzing errors, conduct a comprehensive, in-depth analysis of the codebase to identify the root cause of reported issues. This rule applies to any error analysis request, whether it's runtime errors, build failures, configuration issues, or unexpected behavior.

## Analysis Scope & Requirements

### 1. Root Cause Identification
- Pinpoint the exact reason the error is occurring
- Identify which specific part of the codebase, configuration, or environment is responsible
- Trace the error back to its source, not just the symptom
- Examine the call stack and execution flow leading to the error

### 2. Dependency & Environment Analysis
- Check for version conflicts or compatibility issues
- Verify environment variables and configuration settings
- Analyze dependency installations and imports
- Review system requirements and compatibility matrices
- Check for missing files, permissions, or network accessibility

### 3. Code & Behavior Analysis
- Inspect the specific code paths that lead to the error
- Analyze data flow and state changes before the error occurs
- Check for race conditions, timing issues, or async problems
- Review error handling and fallback mechanisms
- Examine input validation and boundary conditions

### 4. Logs & Diagnostics Review
- Analyze console logs, error messages, and stack traces
- Review network requests and responses if applicable
- Check for silent failures or warnings that precede the main error
- Correlate timestamps and events across different log sources
- Look for patterns in error frequency and conditions

### 5. Contextual Investigation
- Review recent changes that might have introduced the issue
- Check related configuration files and settings
- Analyze similar patterns elsewhere in the codebase
- Consider external factors (network, database, APIs)

## Required Deliverables

When completing error root cause analysis, always provide:

1. **Detailed Summary**: A clear explanation of your findings and the investigation process
2. **Exact Location**: The specific line(s), file(s), or configuration(s) responsible for the error
3. **Root Cause**: The fundamental reason why the error is occurring (not just what's failing)
4. **Suggested Fix**: Concrete, actionable steps to resolve the issue
5. **Prevention Recommendations**: Optional but valuable suggestions for:
   - Improving error handling
   - Adding better logging or monitoring
   - Preventing similar issues in the future
   - Code quality improvements

## Investigation Process

1. **Start Broad**: Use codebase search to understand the overall context and find related code
2. **Narrow Down**: Focus on specific files and functions mentioned in error messages
3. **Trace Backwards**: Follow the execution path that leads to the error
4. **Check Dependencies**: Verify all required components are properly configured
5. **Test Hypotheses**: Validate your findings by examining the code logic
6. **Document Thoroughly**: Explain your reasoning and evidence for the root cause

## Communication Guidelines

- Be specific about what you found and where
- Explain technical concepts clearly
- Provide code references with line numbers when relevant
- If information is missing or unclear, explicitly request clarification
- Prioritize actionable solutions over theoretical explanations

## Error Categories to Consider

- **Runtime Errors**: Exceptions, crashes, unexpected behavior
- **Build/Compilation Errors**: Syntax, import, or dependency issues
- **Configuration Errors**: Environment, settings, or deployment problems
- **Network/API Errors**: Connectivity, authentication, or response issues
- **Database/Storage Errors**: Query, connection, or data integrity problems
- **Performance Issues**: Memory leaks, slow responses, or resource exhaustion

Remember: The goal is not just to identify what's broken, but to understand why it's broken and how to fix it permanently.