---
description: Comprehensive project planning methodology and task breakdown standards for the RAS SDK.
globs: docs/**/*.md, scripts/**/*.js, .cursor/rules/**/*.mdc
---

# üìã Project Planning Standards Rule

This rule defines the methodology for creating comprehensive, granular project plans with detailed task breakdowns for all RAS SDK initiatives.

---

## üéØ Planning Methodology

### Core Planning Principles

```markdown
1. **Hierarchical Task Structure**
   - Top-level goals ‚Üí Tasks ‚Üí Sub-tasks ‚Üí Action items
   - Each task must have 3-5 sub-tasks minimum
   - Sub-sub-tasks for specific commands/validations

2. **Granular Actionability**
   - Every item is a concrete, executable action
   - Include specific commands, file paths, validation steps
   - Assume senior engineer execution level

3. **Cross-Reference Integration**
   - Link tasks to relevant documentation sections
   - Reference related standards and rules
   - Connect dependencies between tasks

4. **Completion Tracking**
   - No pre-marked completions (no ‚úîÔ∏é checkboxes)
   - Status tracking added during execution
   - Clear success criteria for each task
```

### Planning Document Structure

```markdown
## Project Plan Template

### 1. Executive Summary
- **Project Name**: [Clear, descriptive name]
- **Objective**: [Primary goal in 1-2 sentences]
- **Scope**: [What's included/excluded]
- **Timeline**: [Estimated duration]

### 2. Success Criteria
- **Primary Goals**: [Must-achieve objectives]
- **Secondary Goals**: [Nice-to-have objectives]
- **Acceptance Criteria**: [Measurable success metrics]

### 3. Risk Assessment
- **High Risk**: [Critical path items]
- **Medium Risk**: [Important but manageable]
- **Mitigation Strategies**: [How to handle risks]

### 4. Dependencies
- **Internal**: [Other RAS SDK components]
- **External**: [Third-party services/tools]
- **Blocking**: [Tasks that block others]

### 5. Resource Requirements
- **Personnel**: [Team members needed]
- **Tools**: [Software/infrastructure needed]
- **Time**: [Estimated effort per phase]

### 6. Implementation Phases
- **Phase 1**: [Initial preparation]
- **Phase 2**: [Core implementation]
- **Phase 3**: [Validation and rollout]

### 7. Granular Task Breakdown
[Detailed task hierarchy - see Task Breakdown Standards]
```

---

## üìù Task Breakdown Standards

### Hierarchy Requirements

```markdown
**Task Format Structure**:
* **Task 1 ‚Äì [Descriptive Name]** (Reference: ¬ß Section)
  * 1.1 [Sub-task description] 
    * 1.1.1 [Specific action or command]
    * 1.1.2 [Validation step]
  * 1.2 [Next sub-task]
  * 1.3 [Final sub-task with acceptance criteria]

**Granularity Standards**:
- Top-level tasks: Major work streams (3-8 tasks total)
- Sub-tasks: Specific work items (3-5 per task)
- Action items: Concrete commands/steps (2-4 per sub-task)
```

### Content Requirements

```markdown
**Each Task Must Include**:
1. **Clear objective** - What will be accomplished
2. **Specific actions** - Commands, file paths, validation steps
3. **Success criteria** - How to know it's complete
4. **Dependencies** - What must be done first
5. **Estimated effort** - Time or complexity indicator

**Example Task Structure**:
* **Task 3 ‚Äì Configuration Updates** (Reference: ¬ß 4 System Configuration)
  * 3.1 Update module aliases in package.json
    * 3.1.1 Run `npm run validate-aliases` to check current state
    * 3.1.2 Edit package.json._moduleAliases section
    * 3.1.3 Validate with `node -e "console.log(require.resolve('@newAlias'))"`
  * 3.2 Update ESLint rules for new structure
    * 3.2.1 Modify .eslintrc.js import/resolver settings
    * 3.2.2 Run `npm run lint src/` to verify no import errors
  * 3.3 Verify CI/CD pipeline compatibility
    * 3.3.1 Test build process with `npm run build`
    * 3.3.2 Check test suite with `npm run test`
    * 3.3.3 Validate deployment scripts still work
```

### Writing Standards

```markdown
**Formatting Rules**:
- Line limit: ‚â§120 characters per line
- Document limit: ‚â§300 lines per plan section
- Use consistent bullet hierarchy (*, *, *)
- Include command examples in backticks
- Reference sections with (¬ß N) notation

**Language Requirements**:
- Active voice: "Update the config" not "Config should be updated"
- Specific commands: Include exact file paths and command syntax
- Clear success criteria: "Run X and verify Y output"
- Cross-references: Link to relevant standards/docs
```

---

## üîí Planning Guard-Rails

### Prohibited Practices

```markdown
‚ùå **Never Do These**:
- Modify existing completed sections
- Pre-mark tasks as complete (‚úîÔ∏é)
- Use vague language ("update some files")
- Skip validation steps
- Assume previous work without verification
- Create circular dependencies
- Exceed line/complexity limits

‚úÖ **Always Do These**:
- Start with current state verification
- Include rollback procedures
- Add comprehensive validation
- Cross-reference related work
- Provide specific commands
- Test in isolated environment first
```

### Quality Checks

```markdown
**Plan Review Checklist**:
- [ ] All tasks have 3-5 sub-tasks
- [ ] Each sub-task has concrete actions
- [ ] Success criteria are measurable
- [ ] Dependencies are clearly identified
- [ ] Commands include full file paths
- [ ] Validation steps are included
- [ ] Cross-references are accurate
- [ ] Line limits are respected
- [ ] No pre-marked completions
```

---

## üõ†Ô∏è Planning Templates

### Template 1: Code Refactoring Project

```markdown
## Granular Task Breakdown

### Task 0 ‚Äì Project Preparation
* 0.1 Environment setup and validation
  * 0.1.1 Clone repo and create feature branch `refactor/[project-name]`
  * 0.1.2 Run `npm install` and verify all dependencies resolve
  * 0.1.3 Execute `npm run test` to confirm baseline functionality
  * 0.1.4 Create backup of current state with `git tag backup-pre-refactor`
* 0.2 Scope verification and planning validation
  * 0.2.1 Review all files in scope with `find src/ -name "*.js" | grep [pattern]`
  * 0.2.2 Identify potential conflicts with `grep -r "import.*[old-pattern]" src/`
  * 0.2.3 Validate no external dependencies will break
* 0.3 Communication and coordination
  * 0.3.1 Notify team of refactoring start
  * 0.3.2 Document current API surface area
  * 0.3.3 Set up progress tracking branch

### Task 1 ‚Äì Code Analysis and Mapping
* 1.1 Current usage analysis
  * 1.1.1 Generate dependency graph with `npm run analyze-deps`
  * 1.1.2 Map all import statements with `grep -r "require\|import" src/`
  * 1.1.3 Identify circular dependencies
* 1.2 Impact assessment
  * 1.2.1 List all affected files and their relationships
  * 1.2.2 Assess test coverage for affected areas
  * 1.2.3 Document breaking changes and compatibility issues
* 1.3 Refactoring strategy validation
  * 1.3.1 Verify new structure follows architecture.mdc standards
  * 1.3.2 Confirm error handling uses ErrorFactory patterns
  * 1.3.3 Validate logging uses LoggerFactory patterns
```

### Template 2: Documentation Project

```markdown
## Granular Task Breakdown

### Task 0 ‚Äì Documentation Audit
* 0.1 Current state assessment
  * 0.1.1 Run `find docs/ -name "*.md" -type f` to inventory all docs
  * 0.1.2 Check for broken links with `npm run check-links`
  * 0.1.3 Validate documentation structure against standards
* 0.2 Content analysis
  * 0.2.1 Identify outdated content with `grep -r "deprecated\|legacy" docs/`
  * 0.2.2 Find missing documentation for new features
  * 0.2.3 Check cross-reference accuracy
* 0.3 Organization planning
  * 0.3.1 Map current structure to proposed structure
  * 0.3.2 Identify files that need relocation
  * 0.3.3 Plan new directory structure

### Task 1 ‚Äì File Reorganization
* 1.1 Directory structure creation
  * 1.1.1 Create new directories with `mkdir -p docs/[new-structure]`
  * 1.1.2 Set up proper README.md files in each directory
  * 1.1.3 Update .gitignore if needed
* 1.2 File migration
  * 1.2.1 Move files using `mv docs/[old-path] docs/[new-path]`
  * 1.2.2 Update internal links in moved files
  * 1.2.3 Verify no broken references remain
* 1.3 Link and reference updates
  * 1.3.1 Update all internal links to reflect new structure
  * 1.3.2 Fix relative path references
  * 1.3.3 Update table of contents and index files
```

### Template 3: Infrastructure Changes

```markdown
## Granular Task Breakdown

### Task 0 ‚Äì Infrastructure Assessment
* 0.1 Current configuration audit
  * 0.1.1 Review package.json configuration sections
  * 0.1.2 Check .env files and environment variables
  * 0.1.3 Validate CI/CD pipeline configuration
* 0.2 Dependency analysis
  * 0.2.1 Run `npm audit` to check for vulnerabilities
  * 0.2.2 Verify version compatibility with `npm ls`
  * 0.2.3 Check for unused dependencies with `npm prune --dry-run`
* 0.3 Change impact assessment
  * 0.3.1 Identify services that will be affected
  * 0.3.2 Plan rollback procedures
  * 0.3.3 Prepare monitoring and validation scripts

### Task 1 ‚Äì Configuration Updates
* 1.1 Primary configuration changes
  * 1.1.1 Update package.json with new settings
  * 1.1.2 Modify CI/CD pipeline configuration files
  * 1.1.3 Update environment variable templates
* 1.2 Validation and testing
  * 1.2.1 Test configuration with `npm run validate-config`
  * 1.2.2 Run full test suite to verify functionality
  * 1.2.3 Test in staging environment
* 1.3 Deployment preparation
  * 1.3.1 Create deployment checklist
  * 1.3.2 Prepare rollback procedures
  * 1.3.3 Set up monitoring and alerting
```

---

## üìä Plan Integration Standards

### Integration with RAS SDK Standards

```markdown
**Required Cross-References**:
- Architecture standards (architecture.mdc)
- Code quality requirements (codequality.mdc)
- Error handling patterns (errors-standards.mdc)
- Logging requirements (logging-standards.mdc)
- Testing standards (testing-standards.mdc)

**Validation Requirements**:
- All plans must align with domain ownership (structure.md)
- Changes must follow alias import standards (alias-imports.mdc)
- Documentation updates must follow doc-standards.mdc
- Performance changes must meet performance-standards.mdc
```

### Progress Tracking Integration

```markdown
**Status Tracking Format**:
* **Task 1 ‚Äì Configuration Updates** [IN_PROGRESS]
  * 1.1 Update module aliases ‚úÖ COMPLETED
  * 1.2 Update ESLint rules üîÑ IN_PROGRESS
  * 1.3 Verify CI/CD pipeline ‚è≥ PENDING

**Status Indicators**:
- ‚è≥ PENDING - Not started
- üîÑ IN_PROGRESS - Currently being worked on
- ‚úÖ COMPLETED - Successfully finished
- ‚ùå BLOCKED - Cannot proceed
- üîÑ REVIEW - Ready for review
```

---

## üîß Execution Standards

### Pre-Execution Checklist

```markdown
Before starting any planned project:
- [ ] All prerequisites are met
- [ ] Dependencies are available
- [ ] Team is notified
- [ ] Backup/rollback plan exists
- [ ] Success criteria are clear
- [ ] Validation steps are defined
```

### During Execution

```markdown
**Required Practices**:
- Update task status in real-time
- Document any deviations from plan
- Validate each step before proceeding
- Maintain communication with stakeholders
- Test in isolated environment first
- Keep detailed execution log
```

### Post-Execution

```markdown
**Completion Requirements**:
- All validation steps passed
- Documentation updated
- Team notified of completion
- Lessons learned documented
- Rollback procedures tested
- Success metrics measured
```

---

## üö´ Common Planning Anti-Patterns

### Avoid These Mistakes

```markdown
‚ùå **Poor Planning Practices**:
- Vague task descriptions ("fix the issues")
- Missing validation steps
- No rollback procedures
- Circular dependencies
- Unrealistic time estimates
- Missing cross-references
- Pre-marked completions
- Skipping preparation steps

‚úÖ **Best Planning Practices**:
- Specific, actionable tasks
- Comprehensive validation
- Clear success criteria
- Proper dependency mapping
- Realistic effort estimates
- Complete cross-referencing
- Status tracking during execution
- Thorough preparation
```

---

*This rule ensures all RAS SDK projects are planned systematically with comprehensive task breakdowns, clear validation steps, and proper integration with existing standards and processes.*
